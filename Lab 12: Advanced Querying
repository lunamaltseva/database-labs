CREATE TABLE employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    department VARCHAR(100),
    salary NUMERIC(12,2),
    tenure INT,
    manager_id INT REFERENCES employees(employee_id) ON DELETE SET NULL
);

INSERT INTO employees (first_name, last_name, department, salary, tenure, manager_id)
VALUES
('Alice', 'A.', 'Software Engineering', 85000, 6, NULL),
('Bob', 'B.', 'Software Engineering', 65000, 3, 1),
('Clara', 'C.', 'Human Resources', 55000, 8, NULL),
('David', 'D.', 'Human Resources', 48000, 2, 3),
('Evelyn', 'E.', 'Finance', 72000, 10, NULL),
('Frank', 'F.', 'Finance', 50000, 4, 5);

CREATE TABLE regions (
    region_id SERIAL PRIMARY KEY,
    region_name VARCHAR(100) NOT NULL
);

INSERT INTO regions (region_name) VALUES ('North'), ('South'), ('East'), ('West');

CREATE TABLE orders (
    order_id SERIAL PRIMARY KEY,
    product_id INT,
    region_id INT REFERENCES regions(region_id) ON DELETE CASCADE,
    amount NUMERIC(12,2) NOT NULL,
    status VARCHAR(50) CHECK (status IN ('High Priority', 'Medium Priority', 'Low Priority', 'Normal', 'Pending'))
);

INSERT INTO orders (product_id, region_id, amount, status)
VALUES
(1, 1, 600000, 'High Priority'),
(2, 2, 500000, 'Medium Priority'),
(3, 3, 250000, 'Low Priority'),
(4, 4, 1200000, 'High Priority'),
(5, 1, 300000, 'Normal');

CREATE TABLE products (
    product_id SERIAL PRIMARY KEY,
    product_name VARCHAR(150) NOT NULL
);

INSERT INTO products (product_name) VALUES
('Laptop'), ('Mouse'), ('Desk'), ('Monitor'), ('Keyboard');

CREATE TABLE sales (
    sale_id SERIAL PRIMARY KEY,
    product_name VARCHAR(150),
    year INT CHECK (year BETWEEN 2000 AND 2100),
    sales_amount NUMERIC(12,2)
);

INSERT INTO sales (product_name, year, sales_amount)
VALUES
('Laptop', 2022, 500000),
('Laptop', 2023, 700000),
('Laptop', 2024, 900000),
('Chair', 2022, 100000),
('Chair', 2023, 120000),
('Chair', 2024, 130000);

CREATE TABLE pivoted_sales (
    product_name VARCHAR(150) PRIMARY KEY,
    year_2022 NUMERIC(12,2),
    year_2023 NUMERIC(12,2),
    year_2024 NUMERIC(12,2)
);

INSERT INTO pivoted_sales (product_name, year_2022, year_2023, year_2024)
VALUES
('Laptop', 500000, 700000, 900000),
('Chair', 100000, 120000, 130000);

CREATE TABLE warehouse_1 (
    product_id SERIAL PRIMARY KEY,
    product_name VARCHAR(150) NOT NULL,
    quantity INT DEFAULT 0
);

INSERT INTO warehouse_1 (product_name, quantity) VALUES
('Laptop', 10),
('Mouse', 0),
('Chair', 3),
('Monitor', 0);

CREATE TABLE warehouse_2 (
    product_id SERIAL PRIMARY KEY,
    product_name VARCHAR(150) NOT NULL,
    quantity INT DEFAULT 0
);

INSERT INTO warehouse_2 (product_name, quantity) VALUES
('Laptop', 15),
('Mouse', 0),
('Chair', 0),
('Keyboard', 25);

postgres=# SELECT first_name, last_name, salary
postgres=# FROM employees
postgres=# WHERE salary > (
postgres=# SELECT AVG(salary)  -- This scalar subquery returns a single value
postgres=# FROM employees
postgres=# );
 first_name | last_name |  salary  
------------+-----------+----------
 Alice      | A.        | 85000.00
 Bob        | B.        | 65000.00
 Evelyn     | E.        | 72000.00
(3 rows)

postgres=# WITH regional_sales AS (
postgres=# SELECT region_id, SUM(amount) AS total_sales
postgres=# FROM orders
postgres=# GROUP BY region_id
postgres=# )
postgres=# SELECT region_id, total_sales
postgres=# FROM regional_sales
postgres=# WHERE total_sales > 1000000;
 region_id | total_sales 
-----------+-------------
         4 |  1200000.00
(1 row)

postgres=# WITH RECURSIVE org_chart AS (
postgres=# SELECT employee_id, first_name, last_name, manager_id
postgres=# FROM employees
postgres=# WHERE manager_id IS NULL
postgres=# UNION ALL
postgres=# SELECT e.employee_id, e.first_name, e.last_name, e.manager_id
postgres=# FROM employees e
postgres=# INNER JOIN org_chart oc ON e.manager_id = oc.employee_id
postgres=# )
postgres=# SELECT * FROM org_chart;
 employee_id | first_name | last_name | manager_id 
-------------+------------+-----------+------------
           1 | Alice      | A.        |           
           3 | Clara      | C.        |           
           5 | Evelyn     | E.        |           
           2 | Bob        | B.        |          1
           4 | David      | D.        |          3
           6 | Frank      | F.        |          5
(6 rows)

postgres=# SELECT product_name FROM warehouse_1
postgres=# UNION
postgres=# SELECT product_name FROM warehouse_2;
 product_name 
--------------
 Mouse
 Chair
 Laptop
 Keyboard
 Monitor
(5 rows)

postgres=# SELECT product_id FROM warehouse_1 WHERE quantity = 0
postgres=# INTERSECT
postgres=# SELECT product_id FROM warehouse_2 WHERE quantity = 0;
 product_id 
------------
          2
(1 row)

postgres=# SELECT
postgres=# first_name,
postgres=# last_name,
postgres=# department,
postgres=# salary,
postgres=# RANK() OVER (PARTITION BY department ORDER BY salary DESC) AS dept_salary_rank
postgres=# FROM employees;
 first_name | last_name |      department      |  salary  | dept_salary_rank 
------------+-----------+----------------------+----------+------------------
 Evelyn     | E.        | Finance              | 72000.00 |                1
 Frank      | F.        | Finance              | 50000.00 |                2
 Clara      | C.        | Human Resources      | 55000.00 |                1
 David      | D.        | Human Resources      | 48000.00 |                2
 Alice      | A.        | Software Engineering | 85000.00 |                1
 Bob        | B.        | Software Engineering | 65000.00 |                2
(6 rows)

postgres=# SELECT     
postgres=# product_name,
postgres=# SUM(CASE WHEN year = 2022 THEN sales_amount ELSE 0 END) AS year_2022,
postgres=# SUM(CASE WHEN year = 2023 THEN sales_amount ELSE 0 END) AS year_2023,
postgres=# SUM(CASE WHEN year = 2024 THEN sales_amount ELSE 0 END) AS year_2024
postgres=# FROM sales
postgres=# GROUP BY product_name;
 product_name | year_2022 | year_2023 | year_2024 
--------------+-----------+-----------+-----------
 Chair        | 100000.00 | 120000.00 | 130000.00
 Laptop       | 500000.00 | 700000.00 | 900000.00
(2 rows)

postgres=# SELECT product_name, '2022' AS year, year_2022 AS sales_amount FROM pivoted_sales
postgres=# UNION ALL
postgres=# SELECT product_name, '2023' AS year, year_2023 AS sales_amount FROM pivoted_sales
postgres=# UNION ALL
postgres=# SELECT product_name, '2024' AS year, year_2024 AS sales_amount FROM pivoted_sales
postgres=# ORDER BY product_name, year;
 product_name | year | sales_amount 
--------------+------+--------------
 Chair        | 2022 |    100000.00
 Chair        | 2023 |    120000.00
 Chair        | 2024 |    130000.00
 Laptop       | 2022 |    500000.00
 Laptop       | 2023 |    700000.00
 Laptop       | 2024 |    900000.00
(6 rows)

postgres=# SELECT
postgres=# employee_id,
postgres=# SUM(salary) OVER (PARTITION BY department) AS total_dept_salary,
postgres=# AVG(salary) FILTER (WHERE tenure > 5) OVER () AS avg_salary_senior
postgres=# FROM employees;
 employee_id | total_dept_salary | avg_salary_senior  
-------------+-------------------+--------------------
           5 |         122000.00 | 70666.666666666667
           6 |         122000.00 | 70666.666666666667
           3 |         103000.00 | 70666.666666666667
           4 |         103000.00 | 70666.666666666667
           1 |         150000.00 | 70666.666666666667
           2 |         150000.00 | 70666.666666666667
(6 rows)

postgres=# SELECT product_id, status
postgres=# FROM orders
postgres=# ORDER BY
postgres=# CASE status
postgres=# WHEN 'High Priority' THEN 1
postgres=# WHEN 'Medium Priority' THEN 2
postgres=# WHEN 'Low Priority' THEN 3
postgres=# ELSE 4
postgres=# END;
 product_id |     status      
------------+-----------------
          1 | High Priority
          4 | High Priority
          2 | Medium Priority
          3 | Low Priority
          5 | Normal
(5 rows)

postgres=# 

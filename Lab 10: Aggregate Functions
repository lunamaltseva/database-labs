CREATE TABLE employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100),
    department VARCHAR(100),
    salary NUMERIC(12,2),
    age INT,
    hire_date DATE,
    experience_years INT,
    bonus NUMERIC(10,2)
);

INSERT INTO employees (first_name, last_name, email, department, salary, age, hire_date, experience_years, bonus)
VALUES
('Alice', 'A.', 'alice@auca.kg', 'Software Engineering', 70000, 28, '2023-05-15', 4, 3000),
('Bob', 'B.', NULL, 'Software Engineering', 80000, 35, '2022-03-10', 8, NULL),
('Chuck', 'C.', 'charlie@auca.kg', 'Human Resources', 50000, 42, '2024-07-01', 12, 1500),
('Derek', 'D.', 'diana@auca.kg', 'Finance', 60000, 31, '2021-09-05', 7, NULL),
('Evan', 'E.', 'evan@auca.kg', 'Finance', 65000, 27, '2025-01-12', 5, 2000);

CREATE TABLE employee_skills (
    id SERIAL PRIMARY KEY,
    employee_id INT REFERENCES employees(employee_id) ON DELETE CASCADE,
    skill_name VARCHAR(100) NOT NULL
);

INSERT INTO employee_skills (employee_id, skill_name)
VALUES
(1, 'C++'),
(1, 'Python'),
(2, 'Python'),
(3, 'Recruitment'),
(4, 'Negotiation'),
(5, 'Postgres');

CREATE TABLE sales_data (
    sale_id SERIAL PRIMARY KEY,
    department VARCHAR(100),
    sales_amount NUMERIC(12,2)
);

INSERT INTO sales_data (department, sales_amount)
VALUES
('Software Engineering', 100000),
('Finance', 250000),
('Human Resources', 50000);

CREATE TABLE products (
    product_id SERIAL PRIMARY KEY,
    product_name VARCHAR(150),
    category VARCHAR(100),
    price NUMERIC(12,2)
);

INSERT INTO products (product_name, category, price)
VALUES
('Laptop', 'Electronics', 1200),
('Mouse', 'Accessories', 30),
('Chair', 'Furniture', 200),
('Monitor', 'Electronics', 350);

CREATE TABLE sales (
    sale_id SERIAL PRIMARY KEY,
    product_id INT REFERENCES products(product_id) ON DELETE SET NULL,
    sale_date DATE NOT NULL,
    amount NUMERIC(12,2) NOT NULL
);

INSERT INTO sales (product_id, sale_date, amount)
VALUES
(1, '2025-01-10', 1200),
(1, '2025-04-15', 1200),
(4, '2025-06-20', 350),
(2, '2025-03-12', 30),
(3, '2025-07-01', 200);

CREATE TABLE product_reviews (
    review_id SERIAL PRIMARY KEY,
    product_id INT REFERENCES products(product_id) ON DELETE CASCADE,
    rating NUMERIC(2,1) CHECK (rating >= 0 AND rating <= 5),
    review_text TEXT
);

INSERT INTO product_reviews (product_id, rating, review_text)
VALUES
(1, 4.5, 'Excellent performance'),
(1, 4.7, 'Worth the price'),
(2, 3.8, 'Average in quality'),
(4, 4.9, 'Stunning colors');

-- 

CREATE TABLE
INSERT 0 5
CREATE TABLE
INSERT 0 6
CREATE TABLE
INSERT 0 3
CREATE TABLE
INSERT 0 4
CREATE TABLE
INSERT 0 5
CREATE TABLE
INSERT 0 4
postgres=# SELECT COUNT(*) AS total_employees 
postgres=# FROM employees;
 total_employees 
-----------------
               5
(1 row)

postgres=# SELECT COUNT(email) AS employees_with_email 
postgres=# FROM employees;
 employees_with_email 
----------------------
                    4
(1 row)

postgres=# SELECT COUNT(DISTINCT department) AS unique_departments 
postgres=# FROM employees;
 unique_departments 
--------------------
                  3
(1 row)

postgres=# SELECT SUM(salary) AS total_salaries 
postgres=# FROM employees;
 total_salaries 
----------------
      325000.00
(1 row)

postgres=# SELECT department, SUM(sales_amount) AS total_sales
postgres=# FROM sales_data
postgres=# GROUP BY department;
      department      | total_sales 
----------------------+-------------
 Finance              |   250000.00
 Human Resources      |    50000.00
 Software Engineering |   100000.00
(3 rows)

postgres=# SELECT AVG(salary) AS average_salary 
postgres=# FROM employees;
   average_salary   
--------------------
 65000.000000000000
(1 row)

postgres=# SELECT department, AVG(age) AS avg_age
postgres=# FROM employees
GROUP BY department;
      department      |       avg_age       
----------------------+---------------------
 Software Engineering | 31.5000000000000000
 Finance              | 29.0000000000000000
 Human Resources      | 42.0000000000000000
(3 rows)

postgres=# SELECT 
postgres=# MAX(salary) AS highest_salary,
postgres=# MIN(salary) AS lowest_salary
postgres=# FROM employees;
 highest_salary | lowest_salary 
----------------+---------------
       80000.00 |      50000.00
(1 row)

postgres=# SELECT department, MAX(hire_date) AS latest_hire
postgres=# FROM employees
postgres=# GROUP BY department;
      department      | latest_hire 
----------------------+-------------
 Software Engineering | 2023-05-15
 Finance              | 2025-01-12
 Human Resources      | 2024-07-01
(3 rows)

postgres=# SELECT department, STRING_AGG(first_name, ', ') AS employee_names
postgres=# FROM employees
postgres=# GROUP BY department;
      department      | employee_names 
----------------------+----------------
 Software Engineering | Alice, Bob
 Finance              | Derek, Evan
 Human Resources      | Chuck
(3 rows)

postgres=# SELECT employee_id, STRING_AGG(skill_name, ', ' ORDER BY skill_name) AS skills
postgres=# FROM employee_skills
postgres=# GROUP BY employee_id;
 employee_id |   skills    
-------------+-------------
           1 | C++, Python
           2 | Python
           3 | Recruitment
           4 | Negotiation
           5 | Postgres
(5 rows)

postgres=# SELECT department, ARRAY_AGG(salary) AS salary_array
postgres=# FROM employees
postgres=# GROUP BY department;
      department      |    salary_array     
----------------------+---------------------
 Software Engineering | {70000.00,80000.00}
 Finance              | {60000.00,65000.00}
 Human Resources      | {50000.00}
(3 rows)

postgres=# SELECT department, ARRAY_AGG(first_name ORDER BY last_name) AS employees
postgres=# FROM employees
postgres=# GROUP BY department;
      department      |  employees   
----------------------+--------------
 Finance              | {Derek,Evan}
 Human Resources      | {Chuck}
 Software Engineering | {Alice,Bob}
(3 rows)

postgres=# SELECT   
postgres=# department,
postgres=# STDDEV(salary) AS salary_std_dev,
postgres=# VARIANCE(salary) AS salary_variance
postgres=# FROM employees
postgres=# GROUP BY department;
      department      |  salary_std_dev   |    salary_variance    
----------------------+-------------------+-----------------------
 Software Engineering | 7071.067811865475 | 50000000.000000000000
 Finance              | 3535.533905932738 | 12500000.000000000000
 Human Resources      |                   |                      
(3 rows)

postgres=# SELECT CORR(experience_years, salary) AS experience_salary_correlation
postgres=# FROM employees;
 experience_salary_correlation 
-------------------------------
           -0.5384686189633036
(1 row)

postgres=# SELECT 
postgres=# category,
postgres=# COUNT(*) AS number_of_products,
postgres=# SUM(price) AS total_value,
postgres=# AVG(price) AS average_price
postgres=# FROM products
postgres=# GROUP BY category;
  category   | number_of_products | total_value |    average_price     
-------------+--------------------+-------------+----------------------
 Furniture   |                  1 |      200.00 | 200.0000000000000000
 Electronics |                  2 |     1550.00 | 775.0000000000000000
 Accessories |                  1 |       30.00 |  30.0000000000000000
(3 rows)

postgres=# SELECT      
postgres=# EXTRACT(YEAR FROM sale_date) AS year,
postgres=# EXTRACT(QUARTER FROM sale_date) AS quarter,
postgres=# COUNT(*) AS total_sales,
postgres=# SUM(amount) AS total_revenue
postgres=# FROM sales
postgres=# GROUP BY EXTRACT(YEAR FROM sale_date), EXTRACT(QUARTER FROM sale_date)
postgres=# ORDER BY year, quarter;
 year | quarter | total_sales | total_revenue 
------+---------+-------------+---------------
 2025 |       1 |           2 |       1230.00
 2025 |       2 |           2 |       1550.00
 2025 |       3 |           1 |        200.00
(3 rows)

postgres=# SELECT 
postgres=# CASE 
postgres=# WHEN age < 30 THEN 'Under 30'
postgres=# WHEN age BETWEEN 30 AND 50 THEN '30-50'
postgres=# ELSE 'Over 50'
postgres=# END AS age_group,
postgres=# COUNT(*) AS employee_count,
postgres=# AVG(salary) AS avg_salary
postgres=# FROM employees
postgres=# GROUP BY 
postgres=# CASE 
postgres=# WHEN age < 30 THEN 'Under 30'
postgres=# WHEN age BETWEEN 30 AND 50 THEN '30-50'
postgres=# ELSE 'Over 50'
postgres=# END;
 age_group | employee_count |     avg_salary     
-----------+----------------+--------------------
 Under 30  |              2 | 67500.000000000000
 30-50     |              3 | 63333.333333333333
(2 rows)

postgres=# SELECT 
postgres=# department,
postgres=# COUNT(*) AS employee_count
postgres=# FROM employees
postgres=# GROUP BY department
postgres=# HAVING COUNT(*) > 5;
 department | employee_count 
------------+----------------
(0 rows)

postgres=# SELECT 
postgres=# product_id,
postgres=# AVG(rating) AS avg_rating,
postgres=# COUNT(*) AS review_count
postgres=# FROM product_reviews
postgres=# GROUP BY product_id
postgres=# HAVING AVG(rating) > 4.0 AND COUNT(*) >= 10;
 product_id | avg_rating | review_count 
------------+------------+--------------
(0 rows)

postgres=# SELECT department, AVG(salary) AS dept_avg_salary
postgres=# FROM employees
postgres=# GROUP BY department;
      department      |  dept_avg_salary   
----------------------+--------------------
 Software Engineering | 75000.000000000000
 Finance              | 62500.000000000000
 Human Resources      | 50000.000000000000
(3 rows)

postgres=# SELECT 
postgres=# employee_id,
postgres=# first_name,
postgres=# department,
postgres=# salary,
postgres=# AVG(salary) OVER (PARTITION BY department) AS dept_avg_salary
postgres=# FROM employees;
 employee_id | first_name |      department      |  salary  |  dept_avg_salary   
-------------+------------+----------------------+----------+--------------------
           4 | Derek      | Finance              | 60000.00 | 62500.000000000000
           5 | Evan       | Finance              | 65000.00 | 62500.000000000000
           3 | Chuck      | Human Resources      | 50000.00 | 50000.000000000000
           1 | Alice      | Software Engineering | 70000.00 | 75000.000000000000
           2 | Bob        | Software Engineering | 80000.00 | 75000.000000000000
(5 rows)

postgres=# SELECT 
postgres=# COUNT(*) AS total_rows,
postgres=# COUNT(email) AS non_null_emails,
postgres=# COUNT(*) - COUNT(email) AS null_emails
postgres=# FROM employees;
 total_rows | non_null_emails | null_emails 
------------+-----------------+-------------
          5 |               4 |           1
(1 row)

postgres=# SELECT 
postgres=# SUM(bonus) AS total_bonus,        -- NULLs ignored
postgres=# AVG(bonus) AS avg_bonus,          -- NULLs ignored
postgres=# COUNT(bonus) AS employees_with_bonus
postgres=# FROM employees;
 total_bonus |       avg_bonus       | employees_with_bonus 
-------------+-----------------------+----------------------
     6500.00 | 2166.6666666666666667 |                    3
(1 row)

postgres=# SELECT 
postgres=# department,
postgres=# COUNT(*) AS employee_count,
postgres=# MIN(salary) AS min_salary,
postgres=# MAX(salary) AS max_salary,
postgres=# AVG(salary) AS avg_salary,
postgres=# STDDEV(salary) AS salary_std_dev
postgres=# FROM employees
postgres=# GROUP BY department
postgres=# ORDER BY avg_salary DESC;
      department      | employee_count | min_salary | max_salary |     avg_salary     |  salary_std_dev   
----------------------+----------------+------------+------------+--------------------+-------------------
 Software Engineering |              2 |   70000.00 |   80000.00 | 75000.000000000000 | 7071.067811865475
 Finance              |              2 |   60000.00 |   65000.00 | 62500.000000000000 | 3535.533905932738
 Human Resources      |              1 |   50000.00 |   50000.00 | 50000.000000000000 |                  
(3 rows)

postgres=# SELECT   
postgres=# department,
postgres=# COUNT(*) AS total_employees,
postgres=# COUNT(CASE WHEN salary > 50000 THEN 1 END) AS high_earners,
postgres=# COUNT(CASE WHEN hire_date > '2023-01-01' THEN 1 END) AS recent_hires
postgres=# FROM employees
postgres=# GROUP BY department;
      department      | total_employees | high_earners | recent_hires 
----------------------+-----------------+--------------+--------------
 Software Engineering |               2 |            2 |            1
 Finance              |               2 |            2 |            1
 Human Resources      |               1 |            0 |            1
(3 rows)

postgres=# SELECT 
postgres=# department,
postgres=# COUNT(*) AS dept_count,
postgres=# COUNT(*)::FLOAT / (SELECT COUNT(*) FROM employees) * 100 AS percentage
postgres=# FROM employees
postgres=# GROUP BY department
postgres=# ORDER BY percentage DESC;
      department      | dept_count | percentage 
----------------------+------------+------------
 Software Engineering |          2 |         40
 Finance              |          2 |         40
 Human Resources      |          1 |         20
(3 rows)

postgres=# 
CREATE TABLE customers (
    customer_id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100)
);

INSERT INTO customers (name, email) VALUES
('Alice', 'alice@auca.kg'),
('Bob', 'bob@auca.kg'),
('Charlie', 'charlie@auca.kg'),
('Derek', 'derek@auca.kg');

CREATE TABLE orders (
    order_id SERIAL PRIMARY KEY,
    customer_id INTEGER REFERENCES customers(customer_id),
    order_date DATE,
    total_amount DECIMAL(10,2)
);

INSERT INTO orders (customer_id, order_date, total_amount) VALUES
(1, '2025-01-10', 1200),
(1, '2025-04-15', 1200),
(4, '2025-06-20', 350),
(2, '2025-03-12', 30),
(3, '2025-07-01', 200);

CREATE TABLE products (
    product_id SERIAL PRIMARY KEY,
    product_name VARCHAR(100),
    price DECIMAL(10,2)
);

INSERT INTO products (product_name, price) VALUES
('Laptop', 1000),
('Mouse', 25),
('Keyboard', 75),
('Monitor', 300),
('USB Cable', 10);

CREATE TABLE order_items (
    order_item_id SERIAL PRIMARY KEY,
    order_id INTEGER REFERENCES orders(order_id),
    product_id INTEGER REFERENCES products(product_id),
    quantity INTEGER
);

INSERT INTO order_items (order_id, product_id, quantity) VALUES
(1, 1, 1),
(1, 2, 2),
(2, 3, 1),
(3, 4, 1),
(4, 2, 1),
(5, 1, 1);

CREATE TABLE employees (
    employee_id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    manager_id INTEGER REFERENCES employees(employee_id)
);

INSERT INTO employees (name, manager_id) VALUES
('Anna', NULL),
('Brian', 1),
('Clara', 1),
('David', 2),
('Eva', 3);

CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE
);

INSERT INTO users (username) VALUES
('alice_user'),
('bob_user'),
('charlie_user');

CREATE TABLE user_profiles (
    profile_id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(user_id),
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    phone VARCHAR(20)
);

INSERT INTO user_profiles (user_id, first_name, last_name, phone) VALUES
(1, 'Alice', 'Wonderland', '+996700111222'),
(2, 'Bob', 'Builder', '+996700333444'),
(3, 'Charlie', 'Brown', '+996700555666');

CREATE TABLE authors (
    author_id SERIAL PRIMARY KEY,
    author_name VARCHAR(100)
);

INSERT INTO authors (author_name) VALUES
('James Clavell'),
('Leo Tolstoy'),
('Scott Fitsjerald');

CREATE TABLE books (
    book_id SERIAL PRIMARY KEY,
    author_id INTEGER REFERENCES authors(author_id),
    title VARCHAR(200),
    publication_year INTEGER
);

INSERT INTO books (author_id, title, publication_year) VALUES
(1, 'Shogun', 1951),
(1, 'Gaijin', 1950),
(2, 'War and Peace', 1968),
(3, 'The Great Gatsby', 1968);

CREATE TABLE students (
    student_id SERIAL PRIMARY KEY,
    student_name VARCHAR(100)
);

INSERT INTO students (student_name) VALUES
('Alice Johnson'),
('Bob Smith'),
('Clara Adams');

CREATE TABLE courses (
    course_id SERIAL PRIMARY KEY,
    course_name VARCHAR(100)
);

INSERT INTO courses (course_name) VALUES
('Database'),
('Operating Systems'),
('Computer Networks');

CREATE TABLE enrollments (
    enrollment_id SERIAL PRIMARY KEY,
    student_id INTEGER REFERENCES students(student_id),
    course_id INTEGER REFERENCES courses(course_id),
    enrollment_date DATE,
    grade CHAR(2)
);

INSERT INTO enrollments (student_id, course_id, enrollment_date, grade) VALUES
(1, 1, '2025-09-01', 'A'),
(1, 2, '2025-09-01', 'B'),
(2, 3, '2025-09-01', NULL),
(3, 1, '2025-09-01', 'A');

postgres=# SELECT c.name, c.email, o.order_date, o.total_amount
postgres=# FROM customers c
postgres=# INNER JOIN orders o ON c.customer_id = o.customer_id;
  name   |      email      | order_date | total_amount 
---------+-----------------+------------+--------------
 Alice   | alice@auca.kg   | 2025-01-10 |      1200.00
 Alice   | alice@auca.kg   | 2025-04-15 |      1200.00
 Derek   | derek@auca.kg   | 2025-06-20 |       350.00
 Bob     | bob@auca.kg     | 2025-03-12 |        30.00
 Charlie | charlie@auca.kg | 2025-07-01 |       200.00
(5 rows)

postgres=# SELECT c.name, c.email, o.order_date, o.total_amount
postgres=# FROM customers c
postgres=# LEFT JOIN orders o ON c.customer_id = o.customer_id;
  name   |      email      | order_date | total_amount 
---------+-----------------+------------+--------------
 Alice   | alice@auca.kg   | 2025-01-10 |      1200.00
 Alice   | alice@auca.kg   | 2025-04-15 |      1200.00
 Derek   | derek@auca.kg   | 2025-06-20 |       350.00
 Bob     | bob@auca.kg     | 2025-03-12 |        30.00
 Charlie | charlie@auca.kg | 2025-07-01 |       200.00
(5 rows)

postgres=# SELECT c.name, c.email, o.order_date, o.total_amount
postgres=# FROM customers c
postgres=# RIGHT JOIN orders o ON c.customer_id = o.customer_id;
  name   |      email      | order_date | total_amount 
---------+-----------------+------------+--------------
 Alice   | alice@auca.kg   | 2025-01-10 |      1200.00
 Alice   | alice@auca.kg   | 2025-04-15 |      1200.00
 Derek   | derek@auca.kg   | 2025-06-20 |       350.00
 Bob     | bob@auca.kg     | 2025-03-12 |        30.00
 Charlie | charlie@auca.kg | 2025-07-01 |       200.00
(5 rows)

postgres=# SELECT c.name, c.email, o.order_date, o.total_amount
postgres=# FROM customers c
postgres=# FULL OUTER JOIN orders o ON c.customer_id = o.customer_id;
  name   |      email      | order_date | total_amount 
---------+-----------------+------------+--------------
 Alice   | alice@auca.kg   | 2025-01-10 |      1200.00
 Alice   | alice@auca.kg   | 2025-04-15 |      1200.00
 Derek   | derek@auca.kg   | 2025-06-20 |       350.00
 Bob     | bob@auca.kg     | 2025-03-12 |        30.00
 Charlie | charlie@auca.kg | 2025-07-01 |       200.00
(5 rows)

postgres=# SELECT c.name, o.total_amount
postgres=# FROM customers c
postgres=# CROSS JOIN orders o;
  name   | total_amount 
---------+--------------
 Alice   |      1200.00
 Bob     |      1200.00
 Charlie |      1200.00
 Derek   |      1200.00
 Alice   |      1200.00
 Bob     |      1200.00
 Charlie |      1200.00
 Derek   |      1200.00
 Alice   |       350.00
 Bob     |       350.00
 Charlie |       350.00
 Derek   |       350.00
 Alice   |        30.00
 Bob     |        30.00
 Charlie |        30.00
 Derek   |        30.00
 Alice   |       200.00
 Bob     |       200.00
 Charlie |       200.00
 Derek   |       200.00
(20 rows)

postgres=# SELECT c.name, o.order_date, oi.quantity, p.product_name, p.price
postgres=# FROM customers c
postgres=# INNER JOIN orders o ON c.customer_id = o.customer_id
postgres=# INNER JOIN order_items oi ON o.order_id = oi.order_id
postgres=# INNER JOIN products p ON oi.product_id = p.product_id;
  name   | order_date | quantity | product_name |  price  
---------+------------+----------+--------------+---------
 Alice   | 2025-01-10 |        1 | Laptop       | 1000.00
 Alice   | 2025-01-10 |        2 | Mouse        |   25.00
 Alice   | 2025-04-15 |        1 | Keyboard     |   75.00
 Derek   | 2025-06-20 |        1 | Monitor      |  300.00
 Bob     | 2025-03-12 |        1 | Mouse        |   25.00
 Charlie | 2025-07-01 |        1 | Laptop       | 1000.00
(6 rows)

postgres=# SELECT e1.name AS employee, e2.name AS manager
postgres=# FROM employees e1
postgres=# LEFT JOIN employees e2 ON e1.manager_id = e2.employee_id;
 employee | manager 
----------+---------
 Anna     | 
 Brian    | Anna
 Clara    | Anna
 David    | Brian
 Eva      | Clara
(5 rows)

postgres=# SELECT c.name, o.order_date, o.total_amount
postgres=# FROM customers c
postgres=# INNER JOIN orders o ON c.customer_id = o.customer_id
postgres=# WHERE o.order_date >= '2024-01-01'
postgres=# AND o.total_amount > 100;
  name   | order_date | total_amount 
---------+------------+--------------
 Alice   | 2025-01-10 |      1200.00
 Alice   | 2025-04-15 |      1200.00
 Derek   | 2025-06-20 |       350.00
 Charlie | 2025-07-01 |       200.00
(4 rows)

postgres=# SELECT u.username, up.first_name, up.last_name, up.phone
postgres=# FROM users u
postgres=# LEFT JOIN user_profiles up ON u.user_id = up.user_id;
   username   | first_name | last_name  |     phone     
--------------+------------+------------+---------------
 alice_user   | Alice      | Wonderland | +996700111222
 bob_user     | Bob        | Builder    | +996700333444
 charlie_user | Charlie    | Brown      | +996700555666
(3 rows)

postgres=# SELECT a.author_name, b.title, b.publication_year
postgres=# FROM authors a
postgres=# INNER JOIN books b ON a.author_id = b.author_id
postgres=# ORDER BY a.author_name, b.publication_year;
   author_name    |      title       | publication_year 
------------------+------------------+------------------
 James Clavell    | Gaijin           |             1950
 James Clavell    | Shogun           |             1951
 Leo Tolstoy      | War and Peace    |             1968
 Scott Fitsjerald | The Great Gatsby |             1968
(4 rows)

postgres=# SELECT s.student_name, c.course_name, e.enrollment_date, e.grade
postgres=# FROM students s
postgres=# INNER JOIN enrollments e ON s.student_id = e.student_id
postgres=# INNER JOIN courses c ON e.course_id = c.course_id
postgres=# WHERE e.grade IS NOT NULL
postgres=# ORDER BY s.student_name, c.course_name;
 student_name  |    course_name    | enrollment_date | grade 
---------------+-------------------+-----------------+-------
 Alice Johnson | Database          | 2025-09-01      | A 
 Alice Johnson | Operating Systems | 2025-09-01      | B 
 Clara Adams   | Database          | 2025-09-01      | A 
(3 rows)

postgres=# 
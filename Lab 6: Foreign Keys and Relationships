luna:~$ psql -h localhost -p 5432 -U postgres -d postgres
Password for user postgres: 
psql (14.19 (Ubuntu 14.19-0ubuntu0.22.04.1))
SSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)
Type "help" for help.

postgres=# CREATE TABLE departments(
postgres(# dept_id SERIAL PRIMARY KEY,
postgres(# dept_name VARCHAR(100) NOT NULL,
postgres(# room VARCHAR(100)
postgres(# );
CREATE TABLE
postgres=# CREATE TABLE employees(
postgres(# emp_id SERIAL PRIMARY KEY,
postgres(# first_name VARCHAR(50) NOT NULL,
postgres(# last_name VARCHAR(50) NOT NULL,
postgres(# dept_id INTEGER REFERENCES departments(dept_id)
postgres(# );
CREATE TABLE
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees(
postgres(# emp_id SERIAL PRIMARY KEY,
postgres(# first_name VARCHAR(50) NOT NULL,
postgres(# last_name VARCHAR(50) NOT NULL,
postgres(# dept_id INTEGER,
postgres(# FOREIGN KEY (dept_id) REFERENCES departments(dept_id)
postgres(# );
CREATE TABLE
postgres=# ALTER TABLE employees
postgres-# ADD CONSTRAINT fk_employees_department
postgres-# FOREIGN KEY (dept_id) references departments(dept_id);
ALTER TABLE
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees(
postgres(# emp_id SERIAL PRIMARY KEY,
postgres(# first_name VARCHAR(50) NOT NULL,
postgres(# last_name VARCHAR(50) NOT NULL,
postgres(# dept_id INTEGER,
postgres(# CONSTRAINT fk_employees_department
postgres(# FOREIGN KEY (dept_id) REFERENCES departments(dept_id)
postgres(# );
CREATE TABLE
postgres=# INSERT INTO departments (dept_name, room) VALUES
postgres-# ('SFW', '334'),
postgres-# ('GenEd', '310'),
postgres-# ('AMI', '415');
INSERT 0 3
postgres=# INSERT INTO employees (first_name, last_name, dept_id) VALUES
postgres-# ('Dmitrii', 'Toksaitov', 1);
INSERT 0 1
postgres=# INSERT INTO employees (first_name, last_name, dept_id) VALUES
postgres-# ('Uzak', 'Imanaliev', 293291)
postgres-# ;
ERROR:  insert or update on table "employees" violates foreign key constraint "fk_employees_department"
DETAIL:  Key (dept_id)=(293291) is not present in table "departments".
postgres=# DELETE FROM departments WHERE dept_id = 1;
ERROR:  update or delete on table "departments" violates foreign key constraint "fk_employees_department" on table "employees"
DETAIL:  Key (dept_id)=(1) is still referenced from table "employees".
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (
postgres(# emp_id SERIAL PRIMARY KEY,
postgres(# first_name VARCHAR(50) NOT NULL,
postgres(# last_name VARCHAR(50) NOT NULL,
postgres(# dept_id INTEGER REFERENCES departments(dept_id)
postgres(# ON DELETE CASCADE
postgres(# ON UPDATE CASCADE
postgres(# );
CREATE TABLE
postgres=# UPDATE departments SET dept_id = 100 WHERE dept_id = 1;
UPDATE 1
postgres=# DELETE FROM departments WHERE dept_id = 100;
DELETE 1
postgres=# SELECT * FROM employees;
 emp_id | first_name | last_name | dept_id 
--------+------------+-----------+---------
(0 rows)

postgres=# DROP TABLE employees, departments;
DROP TABLE
postgres=# CREATE TABLE users (
postgres(# user_id SERIAL PRIMARY KEY,
postgres(# username VARCHAR(16) UNIQUE NOT NULL,
postgres(# email VARCHAR(100) UNIQUE NOT NULL,
postgres(# created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
postgres(# );
CREATE TABLE
postgres=# CREATE TABLE user_profiles (
postgres(# profile_id SERIAL PRIMARY KEY,
postgres(# user_id INTEGER UNIQUE NOT NULL,
postgres(# first_name VARCHAR(50),
postgres(# last_name VARCHAR(50),
postgres(# bio TEXT,
postgres(# profile_picture_url VARCHAR(255),
postgres(# FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
postgres(# );
CREATE TABLE
postgres=# INSERT INTO users (username, email) VALUES
postgres-# ('johndoe', 'john@example.doe');
INSERT 0 1
postgres=# INSERT INTO user_profiles (user_id, first_name, last_name, bio) VALUES
postgres-# (1, 'John', 'Doe', 'Your run-of-the-mill software developer. Passionate about databases.');
postgres-# );
INSERT 0 1
postgres=# INSERT INTO user_profiles (user_id, first_name, last_name) VALUES
postgres-# (1, 'Jane', 'Smith');
ERROR:  duplicate key value violates unique constraint "user_profiles_user_id_key"
DETAIL:  Key (user_id)=(1) already exists.
postgres=# DROP TABLE users, user_profiles;
DROP TABLE
postgres=# CREATE TABLE departments (
postgres(# dept_id SERIAL PRIMARY KEY,
postgres(# dept_name VARCHAR(100) NOT NULL,
postgres(# manager_name VARCHAR(100),
postgres(# budget DECIMAL(10,2)
postgres(# );
CREATE TABLE
postgres=# CREATE TABLE employees (
postgres(# emp_id SERIAL PRIMARY KEY,
postgres(# first_name VARCHAR(50),
postgres(# last_name VARCHAR(50) NOT NULL,
postgres(# position VARCHAR(100),
postgres(# salary DECIMAL(10,2),
postgres(# hire_date DATE DEFAULT CURRENT_DATE,
postgres(# dept_id INTEGER NOT NULL,
postgres(# FOREIGN KEY (dept_id) REFERENCES departments(dept_id) ON DELETE CASCADE
postgres(# );
CREATE TABLE
postgres=# INSERT INTO departments(dept_name, manager_name, budget) VALUES
postgres-# ('SFW', 'Alice Johnson', 500000.00),
postgres-# ('PR', 'Bob Wilson', 200000.00);
INSERT 0 2
postgres=# INSERT INTO employees (first_name, last_name, position, salary, dept_id) VALUES
postgres-# ('John', 'Smith', 'Software Engineer', 75000.0, 1),
postgres-# ('Jane', 'Doe', 'Senior Developer', 85000.0, 1),
postgres-# ('Mike', 'Brown', 'DevOps Engineer', 80000.0, 1),
postgres-# ('Sarah', 'Davis', 'Marketing Specialist', 50000.0, 2);
INSERT 0 4
postgres=# SELECT d.dept_name, e.first_name, e.last_name. e.position
postgres-# FROM departments d
postgres-# JOIN employees e ON d.dept_id = e.dept_id
postgres-# ORDER BY d.dept_name, e.last_name;
ERROR:  cross-database references are not implemented: e.last_name.e.position
LINE 1: SELECT d.dept_name, e.first_name, e.last_name. e.position
                                          ^
postgres=# SELECT d.dept_name, e.first_name, e.last_name, e.position
FROM departments d
JOIN employees e ON d.dept_id = e.dept_id
ORDER BY d.dept_name, e.last_name;
 dept_name | first_name | last_name |       position       
-----------+------------+-----------+----------------------
 PR        | Sarah      | Davis     | Marketing Specialist
 SFW       | Mike       | Brown     | DevOps Engineer
 SFW       | Jane       | Doe       | Senior Developer
 SFW       | John       | Smith     | Software Engineer
(4 rows)

postgres=# DROP TABLE departments, employees;
DROP TABLE
postgres=# CREATE TABLE students (
postgres=# student_id SERIAL PRIMARY KEY,
postgres=# first_name VARCHAR(50),
postgres=# last_name VARCHAR(50),
postgres=# email VARCHAR(50) UNIQUE,
postgres=# enrollment_date DATE DEFAULT CURRENT_DATE
postgres=# );
CREATE TABLE
postgres=# CREATE TABLE courses (
postgres(# course_id SERIAL PRIMARY KEY,
postgres(# course_code VARCHAR(10) UNIQUE NOT NULL,
postgres(# course_name VARCHAR(100) NOT NULL,
postgres(# credits INTEGER,
postgres(# instructor VARCHAR(100)
postgres(# );
CREATE TABLE
postgres=# CREATE TABLE student_enrollments (
postgres(# enrollment_id SERIAL PRIMARY KEY,
postgres(# student_id INTEGER NOT NULL,
postgres(# course_id INTEGER NOT NULL,
postgres(# enrollment_date DATE DEFAULT CURRENT_DATE,
postgres(# grade CHAR(2),
postgres(# FOREIGN KEY (student_id) REFERENCES students(student_id) ON DELETE CASCADE,
postgres(# FOREIGN KEY (course_id) REFERENCES courses(course_id) ON DELETE CASCADE,
postgres(# UNIQUE (student_id, course_id)
postgres(# );
CREATE TABLE
postgres=# INSERT INTO students (first_name, last_name, email) VALUES
postgres-# ('Alice', 'Johnson', 'alice@university.edu')
postgres-# ,('Bob', 'Smith', 'bob@university.edu'),
postgres-# ('Carol', 'Wilson', 'carol@university.edu');
INSERT 0 3
postgres=# INSERT INTO courses (course_code, course_name, credits, instructor) VALUES
postgres-# ('COM-122', 'Introduction to Programming', 6, 'Dmitrii Toksaitov'),
postgres-# ('COM-231', 'Data Structures', 6, 'Vyacheslav Muravev'),
postgres-# ('MAT-103', 'Mathematical Analysis I', 6, 'Polina Dolmatova');
INSERT 0 3
postgres=# INSERT INTO student_enrollments (student_id, course_id, grade) VALUES
postgres-# (1, 1, 'A'),
postgres-# (1, 2, 'B+'),
postgres-# (2, 1, 'A-'),
postgres-# (2, 3, 'B'),
postgres-# (3, 2, 'A'),
postgres-# (3, 3, 'A-');
INSERT 0 6
postgres=# SELECT
postgres-# s.first_name || ' ' || s.last_name AS student_name,
postgres-# c.course_code,
postgres-# c.course_name,
postgres-# se.grade,
postgres-# se.enrollment_date
postgres-# FROM students s
postgres-# JOIN student_enrollments se ON s.student_id = se.student_id
postgres-# JOIN courses c ON se.course_id = c.course_id
postgres-# ORDER BY s.last_name, c.course_code;
 student_name  | course_code |         course_name         | grade | enrollment_date 
---------------+-------------+-----------------------------+-------+-----------------
 Alice Johnson | COM-122     | Introduction to Programming | A     | 2025-09-17
 Alice Johnson | COM-231     | Data Structures             | B+    | 2025-09-17
 Bob Smith     | COM-122     | Introduction to Programming | A-    | 2025-09-17
 Bob Smith     | MAT-103     | Mathematical Analysis I     | B     | 2025-09-17
 Carol Wilson  | COM-231     | Data Structures             | A     | 2025-09-17
 Carol Wilson  | MAT-103     | Mathematical Analysis I     | A-    | 2025-09-17
(6 rows)

postgres=# SELECT
s.first_name, s.last_name, se.grade                
FROM students s
JOIN student_enrollments se ON s.student_id = se.student_id
JOIN courses c ON se.course_id = c.course_id
WHERE c.course_code = 'COM-122';
 first_name | last_name | grade 
------------+-----------+-------
 Alice      | Johnson   | A 
 Bob        | Smith     | A-
(2 rows)

postgres=# SELECT
c.course_code, c.course_name, c.credits, se.grade
FROM students s
JOIN student_enrollments se ON s.student_id = se.student_id
JOIN courses c ON se.course_id = c.course_id
WHERE s.email = 'alice@university.edu';
 course_code |         course_name         | credits | grade 
-------------+-----------------------------+---------+-------
 COM-122     | Introduction to Programming |       6 | A 
 COM-231     | Data Structures             |       6 | B+
(2 rows)

postgres=# \q